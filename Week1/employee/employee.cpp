#include <iostream>
using std::string;

// adding attributes
// all of the attributes are private by default
// all of these members here are private

// private: whatever is private will be hidden
// public: you will be able to access it outside of the class 
// protected: in-between private and public

// abtract class
class AbstractEmployee {
    virtual void AskForPromotion() = 0;
};

class Employee:AbstractEmployee {

private:
// protected:
// public:
    string Name;
    string Company;
    int Age;

public:
    void setName(string name) {
        Name = name;
    }
    string getName() {
        return Name;
    }
    void setCompany(string company) {
        Company = company;
    }
    string getCompany() {
        return Company;
    }
    void setAge(int age) {
        // validation check
        if(age >= 18)
        Age = age;
    }
    int getAge() {
        return Age;
    }

    // creating a introducing function
    void IntroduceYourself() {
        std::cout << "Name - " << Name << std::endl;
        std::cout << "Company - " << Company << std::endl;
        std::cout << "Age - " << Age << std::endl;
    }
    
    // creating a contructor function

    // contructor: a contructor is a special type of method when invoked everytime an object of a class is created
    // default contructor: a contructor automatically generated by the complier

    // contructor rules:
    // the contructor does not have a return type 
    // the contructor must be public
    // the contructor matches the class name

    
    Employee(string name, string company, int age) {
        Name = name;
        Company = company;
        Age = age;
    }
    
    void AskForPromotion() {
        if (Age > 30)
            std::cout << Name << " got promoted!" << std::endl;
        else
            std::cout << Name << ", sorry NO promotion for you!" << std::endl;
    }
};


// creating the variable type
int main() {

    // class   object
    // invoking the constructor fucntion Employee
    Employee employee1 = Employee("Andre", "Néo-Manhattan", 25);

    // invoking the introducing function
    // employee1.IntroduceYourself();

    Employee employee2 = Employee("Nam", "Néo-Manhattan", 35);

    // employee2.IntroduceYourself();

    // employee1.setAge(15);
    // std::cout << employee1.getName() << " is " << employee1.getAge() << " years old.";
    employee1.AskForPromotion();
    employee2.AskForPromotion();
}
